/*
 * car.c
 *
 *  Created on: 2023. mÃ¡rc. 28.
 *      Author: plasz
 */


#include "car.h"
Car car;
Car car_prev;

void InitComponents()
{
	InitUltrasonicMeasurement(&ultrasonic_measurement);
	InitOpticMeasurement(&optic_measurement);
	InitMotors();
	UsartBufferInit();
	PIDInit();
	InitEncoder(&Encoder_right);
	InitEncoder(&Encoder_left);
}
volatile bool first = 0;
void InitCar()
{
	car.direction = GOFORWARD;
	car.obstacle_avoidance = false;
	car.tempomat = true;
	car.speed = 0;
	car.duty = 50;
	car.is_obstacle_in_the_way = false;
	car.is_car_blocked = false;
	car.collision = NoCollision;
	car.independent =false;

	car_prev.direction = STOPCAR;
	car_prev.obstacle_avoidance = false;
	car_prev.tempomat = true;
	car_prev.speed = 0;
	car_prev.duty = 50;
	car_prev.is_obstacle_in_the_way = false;
	car_prev.is_car_blocked = false;
	car_prev.collision = NoCollision;
	car_prev.independent =false;

}

void ProcessPrompt()
{
	Car car_new = car;
        char* prompt = buffer.prompt;

//        if(car_new.independent && (strcmp(prompt, "I\0")!=0 || strcmp(prompt, "T\0")!=0
//        		|| strcmp(prompt, "d\0")!=0) || strcmp(prompt, "T\0")!=0)
//			return;

		if(strcmp(prompt, "F\0")==0){ //FORWARD
			if(car_new.independent)
				return;
			car_new.direction = GOFORWARD;
			PrintUSART1_NB("OK");
		}

		else if(strcmp(prompt, "B\0")==0){ //BACKWARD
			if(car_new.independent)
				return;
			car_new.direction = GOBACKWARD;
			PrintUSART1_NB("OK");
		}
		else if(strcmp(prompt, "R\0")==0){  //RIGHT
			if(car_new.independent)
				return;
			car_new.direction = TURNRIGHT;
			PrintUSART1_NB("OK");
		}
		else if(strcmp(prompt, "L\0")==0){	//LEFT
			if(car_new.independent)
				return;
			car_new.direction = TURNLEFT;
			PrintUSART1_NB("OK");
		}
		else if(strcmp(prompt, "S\0")==0){	//STOP
			car_new.direction = STOPCAR;
			PrintUSART1_NB("OK");
		}
		else if(strcmp(prompt, "T\0")==0){	//TOGGLE_TEMPOMAT
			car_new.tempomat = (!car_new.tempomat);
			if(car_new.tempomat)
			{
				if((car_new.direction == GOFORWARD || car_new.direction == GOBACKWARD))
				{
					car_new.speed = CalculateSpeedfromRPM((Encoder_left.RPM + Encoder_right.RPM)/2.0);
					float rpm_setpoint = ScaleUpRPM((Encoder_right.RPM + Encoder_left.RPM)/2.0);
					pid_right.setpoint = rpm_setpoint;
					pid_left.setpoint =  rpm_setpoint;
				}
				else
				{
					car.speed = (Encoder_right.RPM > Encoder_left.RPM) ? CalculateSpeedfromRPM(Encoder_right.RPM) : CalculateSpeedfromRPM(Encoder_left.RPM);
					pid_right.setpoint = ScaleUpRPM(Encoder_right.RPM);
					pid_left.setpoint = ScaleUpRPM(Encoder_left.RPM);
				}
				MRT_StartTimer(MRT0_PERIPHERAL, MRT0_CHANNEL_1, MRT0_CHANNEL_1_TICKS);
			}

//			else if(!car_new.tempomat)
//			{
//				if((car_new.direction == GOFORWARD || car_new.direction == GOBACKWARD)){
//					 //car_new.duty = (pid_left.output + pid_right.output) / 20;
//				}
//				else {
//					car.duty = (Encoder_right.RPM > Encoder_left.RPM) ? pid_right.output/10 : pid_left.output/10;
//				}
	        MRT_StopTimer(MRT0_PERIPHERAL, MRT0_CHANNEL_1);
			PrintUSART1_NB("OK");
		}
		else if(strcmp(prompt, "O\0")==0){	//TOGGLE_OBSTACLE_AVOIDANCE
			car_new.obstacle_avoidance = (!car_new.obstacle_avoidance);
			PrintUSART1_NB("OK");
		}
		else if(strcmp(prompt, "Speed\0" ) == 0 || strcmp(prompt, "s\0")==0){
					if(car.tempomat)
					{
						car_new.speed = buffer.parameter;
						float rpm_setpoint = ScaleUpRPM(CalculateRPMfromSpeed(car_new.speed));
						rpm_setpoint = (rpm_setpoint > MAX_PID_OUTPUT) ? rpm_setpoint : MAX_PID_OUTPUT;
						rpm_setpoint = (rpm_setpoint < MIN_PID_OUTPUT) ? rpm_setpoint : MIN_PID_OUTPUT;

						pid_right.setpoint = rpm_setpoint;
						pid_left.setpoint =  rpm_setpoint;
						MRT_StartTimer(MRT0_PERIPHERAL, MRT0_CHANNEL_1, MRT0_CHANNEL_1_TICKS);
					}
					PrintUSART1_NB("OK");
				}
		else if(strcmp(prompt, "Duty\0")==0 || strcmp(prompt, "d\0")==0){
					if(!car.tempomat && (buffer.parameter >= MinimalDuty) && (buffer.parameter <= MaximumDuty))
						car_new.duty = buffer.parameter;
					PrintUSART1_NB("OK");
						}
		else if(strcmp(prompt, "I")==0){
			if(car.independent != true)
			{	car_new.independent = true;
				car_new.obstacle_avoidance = true;
				car_new.direction = GOFORWARD;

				PrintUSART1_NB("OK");
			}
			else
			{
				car_new.independent = false;
				car_new.direction = STOPCAR;
				StopCar();
			}
			PrintUSART1_NB("OK");

		}
		else{
			PrintUSART1_NB("invalid prompt");
		}

	car_prev = car;
	car = car_new;

	if(first)
		car_prev = car;


}
void GoForward()
{
	RotateForward(&motor_right); RotateForward(&motor_left);
}
void GoBackward()
{
	RotateBackward(&motor_right); RotateBackward(&motor_left);
}

void TurnRight()
{
	RotateForward(&motor_right); StopMotor(&motor_left);
}

void TurnLeft()
{
	RotateForward(&motor_left); StopMotor(&motor_right);
}

void TurnRightStationary()
{
	RotateForward(&motor_right); RotateBackward(&motor_left);
}

void TurnLeftStationary()
{
	RotateForward(&motor_left); RotateBackward(&motor_right);
}

void StopCar()
{
	StopMotor(&motor_right); StopMotor(&motor_left);
}

bool isObstacleDetected(){
	return((ultrasonic_measurement.distance_in_cm > UltrasonicTreshold && ultrasonic_measurement.is_valid)
			|| optic_measurement.back_left < OpticTreshold
			|| optic_measurement.back_right < OpticTreshold
			|| optic_measurement.front_left < OpticTreshold
			|| optic_measurement.front_right < OpticTreshold
			);
}

bool isRoadBlockedinEveryDirection()
{
	return((ultrasonic_measurement.distance_in_cm > UltrasonicTreshold && ultrasonic_measurement.is_valid)
			&& optic_measurement.back_left < OpticTreshold
			&& optic_measurement.back_right < OpticTreshold
			&& optic_measurement.front_left < OpticTreshold
			&& optic_measurement.front_right < OpticTreshold
			);
}



void SetSpeed(){
	if(car.is_car_blocked)
		return;
	if(car.tempomat)
	{
		 if(isPIDUpdated())
		 {
		 SetPWM(RoundPIDOutput(pid_right.output + PID_OUTPUT_OFFSET), &motor_right);
		 SetPWM(RoundPIDOutput(pid_left.output + PID_OUTPUT_OFFSET), &motor_left);
		 pid_updated = false;
		 }
	}
	else if(!car.tempomat)
	{
		if(car.duty != car_prev.duty)
		{
			SCTIMER_UpdatePwmDutycycle(SCT0_PERIPHERAL, kSCTIMER_Out_0, car.duty, SCT0_pwmEvent[0]);
			SCTIMER_UpdatePwmDutycycle(SCT0_PERIPHERAL, kSCTIMER_Out_1, car.duty, SCT0_pwmEvent[1]);
		}
	}

}
float CalculateSpeedfromRPM(float rpm)
{
	return (WheelCircumference * rpm) / 60;
}
float CalculateRPMfromSpeed(float speed)
{
	return (speed / WheelCircumference) * 60;
}
