/*
 * encoder.c
 *
 *  Created on: 2023. mÃ¡rc. 23.
 *      Author: plasz
 */

#include "encoder.h"

volatile uint32_t captured_time_right = 0;
volatile uint32_t captured_time_left = 0;
volatile uint32_t captured_time_right_prev = 0;
volatile uint32_t captured_time_left_prev = 0;
volatile double  microseconds_elapsed_right = 0;
volatile double microseconds_elapsed_left = 0;



volatile Encoder Encoder_right;
volatile Encoder Encoder_left;

void InitEncoder(volatile Encoder* encoder) {
    encoder->RPM = 0.0f;
    encoder->RPM_prev = 0.0f;
    encoder->updated = false;
}



float lowPassFilter(float input, float prevOutput, float deltaTime, float cutoffFreq)
{
    float RC = 1.0f / (2.0f * 3.14159 * cutoffFreq);
    float alpha = deltaTime / (RC + deltaTime);

    return alpha * input + (1.0f - alpha) * prevOutput;
}


void EncoderRightCallback(uint32_t flags) {
    //static float deltaTimeRight = 0.0f;
    static float measurement = 0;
    static bool transient = false;
    //static float overshoot_measurement = 0;

    Encoder_right.RPM_prev = Encoder_right.RPM;
    captured_time_right_prev = captured_time_right;
    captured_time_right = CTIMER0->CR[1];

    if (captured_time_right_prev) {
        microseconds_elapsed_right = captured_time_right - captured_time_right_prev;
        measurement = (1.0 / (microseconds_elapsed_right / (60.0 * 1000000.0))) * (1.0 / Resolution);
    }

    if(measurement > MAX_RPM)
    	measurement = Encoder_right.RPM;


    if(!transient)
    {
        if(fabs(measurement - Encoder_right.RPM) < 0.3* Encoder_right.RPM)
        	Encoder_right.RPM = measurement;
        else
        {
        	//overshoot_measurement = measurement;
        	transient = true;
        }
    }

    if(transient)
    {
    	Encoder_right.RPM = measurement;
    	transient = false;
    }

    //Encoder_right.RPM = lowPassFilter(Encoder_right.RPM, Encoder_right.RPM_prev, deltaTimeRight, FILTER_CUTOFF_FREQ);

    Encoder_right.updated = true;
}


void EncoderLeftCallback(uint32_t flags) {
    //static float deltaTimeLeft = 0.0f;
    static float measurement = 0;
        static bool transient = false;
      //  static float overshoot_measurement = 0;

    Encoder_left.RPM_prev = Encoder_left.RPM;
    captured_time_left_prev = captured_time_left;
    captured_time_left = CTIMER0->CR[2];

    if (captured_time_left_prev) {
        microseconds_elapsed_left = captured_time_left - captured_time_left_prev;
        measurement = (1.0 / (microseconds_elapsed_left / (60.0 * 1000000.0))) * (1.0 / Resolution);
    }

    if(measurement > MAX_RPM)
        	measurement = Encoder_left.RPM;


        if(!transient)
        {
            if(fabs(measurement - Encoder_left.RPM) < 0.2* Encoder_left.RPM)
            	Encoder_left.RPM = measurement;
            else
            {
            	//overshoot_measurement = measurement;
            	transient = true;
            }
        }

        if(transient)
        {
        	Encoder_left.RPM = measurement;
        	transient = false;
        }


    Encoder_left.updated = true;
}

void HandleNoEncoderSignal(volatile Encoder* encoder)
{
	 // Reset RPM values to 0
	    encoder->RPM = 0.0f;
	    encoder->RPM_prev = 0.0f;

}
