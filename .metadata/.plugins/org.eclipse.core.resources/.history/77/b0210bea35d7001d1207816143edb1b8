#include "PID.h"

	PidController pid_right;
	PidController pid_left;
	volatile bool updated = false;
void PIDInit(){;
//TODO;

//pid->max_output =
//
//pid->min_output =
}

void PIDContollerUpdate(PidController* pid, float measurement){

	float error = pid->setpoint - measurement;

    float proportional = pid->Kp * error;

    pid->integral += pid->Ki * error;

    // Limit the integral term to prevent windup
    if (pid->integral > pid->max_output) {
            pid->integral = pid->max_output;
        }
    else if (pid->integral < pid->min_output) {
            pid->integral = pid->min_output;
        }

    float derivative = pid->Kd * (error - pid->last_error);

    pid->output = proportional + pid->integral + derivative;

    // Limit the PWM output to within the allowable range
    if (output > pid->max_output) {
          output = pid->max_output;
      }
    else if (output < pid->min_output) {
          output = pid->min_output;
      }

    pid->last_error = error;

}
bool isPIDUpdated()
{
	return updated;
}
