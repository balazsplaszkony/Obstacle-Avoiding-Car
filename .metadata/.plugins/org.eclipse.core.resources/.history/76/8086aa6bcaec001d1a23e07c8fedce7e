/*
 * Copyright 2016-2023 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @file    main.c
 * @brief   Application entry point.
 */
#include <motor.h>
#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "LPC845.h"
#include "fsl_debug_console.h"

/* TODO: insert other include files here. */
#include "fsl_power.h"
#include "stdbool.h"
#include "distance.h"
#include "ultrasonic.h"
//#include "bluetooth.h"
#include "encoder.h"
#include "PID.h"
#include "direction.h"
#include "car.h"
#include "USART.h"

/* TODO: insert other definitions and declarations here. */

/*
 * @brief   Application entry point.
 */


int main(void) {

    /* Init board hardware. */
    BOARD_InitBootPins();
    BOARD_InitBootClocks();

    // initializes the starting state of the car
    InitCar();
    // initializes the components of the car
    InitComponents();

    POWER_DisablePD(kPDRUNCFG_PD_ADC0);
    BOARD_InitBootPeripherals();
    BOARD_InitPeripherals();
		//SCTIMER_UpdatePwmDutycycle(SCT0_PERIPHERAL, kSCTIMER_Out_1, 80, SCT0_pwmEvent[0]);
//		SetPWM(305, motor_right);
//		SetPWM(605, motor_left);
	//SCTIMER_UpdatePwmDutycycle(SCT0_PERIPHERAL, kSCTIMER_Out_1, 80, SCT0_pwmEvent[0]);

    /* Start receiving data */
#ifndef BOARD_INIT_DEBUG_CONSOLE_PERIPHERAL
    /* Init FSL debug console. */
    BOARD_InitDebugConsole();
    PRINTF("Hello world");
#endif
    if (SysTick_Config(SystemCoreClock / 1000U))
    {
    while (1){} //hibás osztás érték esetén végtelen ciklus
    }

    while(true)
	{
    	// Gets UART message to the buffer if there is a new message,
    	// then processes it and clears the buffer
    	if(GetUSARTMessage()){
    		ProcessPrompts();
    	}
    	// Calls the state machine of the optic and ultrasonic distance measurements
    	SenseDistance();

    	// Updates the direction based on commands and sensor data
    	UpdateDirection();

    	// Looks for a clear path, if the car cannot go towards the selected direction
    	if(car.is_obstacle_in_the_way)
    		FindClearRoute();

    	// Sets the duty cycle of the motors' pwm signal, either as a constant value,
    	// or if tempomat is enabled, then the duty cycle is determined by the PID controller
    	SetSpeed();
    }
    return 0;
}



// ha nem tud semerre menni a kocsi, és utána arrébb teszik, hogy tudjon azt még le kell kezelni,
// de egyelőrre egy végtelen ciklust teszek ide
while(car.is_car_blocked_completely);

