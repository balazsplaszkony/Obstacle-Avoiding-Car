/*
 * car.c
 *
 *  Created on: 2023. mÃ¡rc. 28.
 *      Author: plasz
 */


#include "car.h"
volatile UsartBuffer bluetooth_prompts;
Car car;
Car car_prev;

void InitComponents()
{
	InitUltrasonicMeasurement(&ultrasonic_measurement);
	InitOpticMeasurement(&optic_measurement);
	InitMotors();
	//UsartBufferInit();
}

void InitCar()
{
	car.direction = STOPCAR;
	car.obstacle_avoidance = false;
	car.tempomat = false;
	car.speed = MinimalSpeed;
	car.is_obstacle_in_the_way = false;
	car.is_car_blocked_completely = false;

	car_prev.direction = STOPCAR;
	car_prev.obstacle_avoidance = false;
	car_prev.tempomat = false;
	car_prev.speed = MinimalSpeed;
	car_prev.is_obstacle_in_the_way = false;
	car_prev.is_car_blocked_completely = false;
}

void ProcessPrompts()
{

	Car car_new = car;

	for(int i = 0; buffer.received_prompts > 0; i++)
	{
		if(strcmp(buffer.prompts, "FORWARD")==0){
			car_new.direction = GOFORWARD;
		}
		if(strcmp(buffer.prompts, "BACKWARD")==0){
			car_new.direction = GOBACKWARD;
		}
		if(strcmp(buffer.prompts, "RIGHT")==0){
			car_new.direction = TURNRIGHT;
		}
		if(strcmp(buffer.prompts, "LEFT")==0){
			car_new.direction = TURNLEFT;
		}
		if(strcmp(buffer.prompts, "STOP")==0){
					car_new.direction = STOPCAR;
		}
		if(strcmp(buffer.prompts, "TOGGLE_TEMPOMAT")==0){
			car_new.tempomat = (!car_new.tempomat);
		}
		if(strcmp(buffer.prompts, "SLOWDOWN")==0){
			if(car_new.speed > MinimalSpeed) car_new.speed--;
		}
		if(strcmp(buffer.prompts, "SPEEDUP")==0){
			if(car_new.speed < MaximumSpeed) car_new.speed++;
		}
		if(strcmp(buffer.prompts, "TOGGLE_OBSTACLE_AVOIDANCE")==0){
			car_new.obstacle_avoidance = (!car_new.obstacle_avoidance);
		}
}
	car_prev = car;
	car = car_new;

}
void GoForward()
{
	RotateForward(&motor_right); RotateForward(&motor_left);
}
void GoBackward()
{
	RotateBackward(&motor_right); RotateBackward(&motor_left);
}

void TurnRight()
{
	RotateForward(&motor_right); StopMotor(&motor_left);
}

void TurnLeft()
{
	RotateForward(&motor_left); StopMotor(&motor_right);
}

void TurnRightStationary()
{
	RotateForward(&motor_right); RotateBackward(&motor_left);
}

void TurnLeftStationary()
{
	RotateForward(&motor_left); RotateBackward(&motor_right);
}

void StopCar()
{
	StopMotor(&motor_right); StopMotor(&motor_left);
}

bool isObstacleDetected(){
	return((ultrasonic_measurement.distance_in_cm > UltrasonicTreshold && ultrasonic_measurement.is_valid)
			|| optic_measurement.back_left < OpticTreshold
			|| optic_measurement.back_right < OpticTreshold
			|| optic_measurement.front_left < OpticTreshold
			|| optic_measurement.front_right < OpticTreshold
			);
}

bool isRoadBlockedinEveryDirection()
{
	return((ultrasonic_measurement.distance_in_cm > UltrasonicTreshold && ultrasonic_measurement.is_valid)
			&& optic_measurement.back_left < OpticTreshold
			&& optic_measurement.back_right < OpticTreshold
			&& optic_measurement.front_left < OpticTreshold
			&& optic_measurement.front_right < OpticTreshold
			);
}


