/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
!!GlobalInfo
product: Peripherals v12.0
processor: LPC845
package_id: LPC845M301JBD48
mcu_data: ksdk2_0
processor_version: 13.0.1
board: LPC845BREAKOUT
functionalGroups:
- name: BOARD_InitPeripherals
  UUID: a1bf1abb-ba15-4a89-8c58-09436b4ba743
  selectedCore: core0
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/

/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
component:
- type: 'system'
- type_id: 'system'
- global_system_definitions:
  - user_definitions: ''
  - user_includes: ''
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/

/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
component:
- type: 'uart_cmsis_common'
- type_id: 'uart_cmsis_common_9cb8e302497aa696fdbb5a4fd622c2a8'
- global_USART_CMSIS_common:
  - quick_selection: 'default'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/

/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
component:
- type: 'gpio_adapter_common'
- type_id: 'gpio_adapter_common_57579b9ac814fe26bf95df0a384c36b6'
- global_gpio_adapter_common:
  - quick_selection: 'default'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "peripherals.h"

/***********************************************************************************************************************
 * BOARD_InitPeripherals functional group
 **********************************************************************************************************************/
/***********************************************************************************************************************
 * USART1 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'USART1'
- type: 'lpc_miniusart'
- mode: 'transfer'
- custom_name_enabled: 'false'
- type_id: 'lpc_miniusart_8dab9e8c7daef1c58d159a792e99242b'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'USART1'
- config_sets:
  - fsl_usart:
    - usartConfig:
      - clockSource: 'FunctionClock'
      - clockSourceFreq: 'ClocksTool_DefaultInit'
      - baudRate_Bps: '9600'
      - syncMode: 'kUSART_SyncModeDisabled'
      - parityMode: 'kUSART_ParityDisabled'
      - stopBitCount: 'kUSART_OneStopBit'
      - bitCountPerChar: 'kUSART_8BitsPerChar'
      - loopback: 'false'
      - enableRx: 'true'
      - enableTx: 'true'
      - clockPolarity: 'kUSART_RxSampleOnFallingEdge'
      - enableContinuousSCLK: 'false'
      - enableHardwareFlowControl: 'false'
  - Transfer_cfg:
    - transfer:
      - init_rx_transfer: 'true'
      - rx_transfer:
        - data_size: '64'
      - init_tx_transfer: 'true'
      - tx_transfer:
        - data_size: '64'
      - init_callback: 'false'
      - callback_fcn: ''
      - user_data: ''
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const usart_config_t USART1_config = {
  .baudRate_Bps = 9600UL,
  .syncMode = kUSART_SyncModeDisabled,
  .parityMode = kUSART_ParityDisabled,
  .stopBitCount = kUSART_OneStopBit,
  .bitCountPerChar = kUSART_8BitsPerChar,
  .loopback = false,
  .enableRx = true,
  .enableTx = true,
  .clockPolarity = kUSART_RxSampleOnFallingEdge,
  .enableContinuousSCLK = false,
  .enableHardwareFlowControl = false
};
usart_handle_t USART1_handle;
uint8_t USART1_rxBuffer[USART1_RX_BUFFER_SIZE];
usart_transfer_t USART1_rxTransfer = {
  .rxData = USART1_rxBuffer,
  .dataSize = USART1_RX_BUFFER_SIZE
};
uint8_t USART1_txBuffer[USART1_TX_BUFFER_SIZE];
usart_transfer_t USART1_txTransfer = {
  .data = USART1_txBuffer,
  .dataSize = USART1_TX_BUFFER_SIZE
};

static void USART1_init(void) {
  /* USART1 peripheral initialization */
  USART_Init(USART1_PERIPHERAL, &USART1_config, USART1_CLOCK_SOURCE);
  USART_TransferCreateHandle(USART1_PERIPHERAL, &USART1_handle, NULL, NULL);
}

/***********************************************************************************************************************
 * CTIMER0 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'CTIMER0'
- type: 'ctimer'
- mode: 'Capture_Match'
- custom_name_enabled: 'false'
- type_id: 'ctimer_44573e4bbd77c18d33bceb2e7900a074'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'CTIMER0'
- config_sets:
  - fsl_ctimer:
    - ctimerConfig:
      - mode: 'kCTIMER_TimerMode'
      - clockSource: 'FunctionClock'
      - clockSourceFreq: 'ClocksTool_DefaultInit'
      - timerPrescaler: '30'
    - EnableTimerInInit: 'true'
    - matchChannels: []
    - captureChannels:
      - 0:
        - captureChannelPrefixId: 'Capture_0'
        - captureChannel: 'kCTIMER_Capture_0'
        - captureEdge: 'kCTIMER_Capture_BothEdge'
        - enableInterrupt: 'true'
      - 1:
        - captureChannelPrefixId: 'Capture_1'
        - captureChannel: 'kCTIMER_Capture_1'
        - captureEdge: 'kCTIMER_Capture_FallEdge'
        - enableInterrupt: 'true'
      - 2:
        - captureChannelPrefixId: 'Capture_2'
        - captureChannel: 'kCTIMER_Capture_2'
        - captureEdge: 'kCTIMER_Capture_FallEdge'
        - enableInterrupt: 'true'
    - interruptCallbackConfig:
      - interrupt:
        - IRQn: 'CTIMER0_IRQn'
        - enable_priority: 'true'
        - priority: '0'
      - callback: 'kCTIMER_MultipleCallback'
      - match0Callback: ''
      - match1Callback: ''
      - match2Callback: ''
      - match3Callback: ''
      - capture0Callback: 'Ultrasonic_Callback'
      - capture1Callback: 'EncoderRightCallback'
      - capture2Callback: 'EncoderLeftCallback'
      - capture3Callback: ''
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const ctimer_config_t CTIMER0_config = {
  .mode = kCTIMER_TimerMode,
  .input = kCTIMER_Capture_0,
  .prescale = 29
};
/* Multiple callback functions definition */
ctimer_callback_t CTIMER0_callback[] = {NULL, NULL, NULL, NULL, Ultrasonic_Callback, EncoderRightCallback, EncoderLeftCallback, NULL};

static void CTIMER0_init(void) {
  /* CTIMER0 peripheral initialization */
  CTIMER_Init(CTIMER0_PERIPHERAL, &CTIMER0_config);
  /* Interrupt vector CTIMER0_IRQn priority settings in the NVIC. */
  NVIC_SetPriority(CTIMER0_TIMER_IRQN, CTIMER0_TIMER_IRQ_PRIORITY);
  /* capture channel 0 of CTIMER0 peripheral initialization */
  CTIMER_SetupCapture(CTIMER0_PERIPHERAL, CTIMER0_CAPTURE_0_CHANNEL, kCTIMER_Capture_BothEdge, true);
  /* capture channel 1 of CTIMER0 peripheral initialization */
  CTIMER_SetupCapture(CTIMER0_PERIPHERAL, CTIMER0_CAPTURE_1_CHANNEL, kCTIMER_Capture_FallEdge, true);
  /* capture channel 2 of CTIMER0 peripheral initialization */
  CTIMER_SetupCapture(CTIMER0_PERIPHERAL, CTIMER0_CAPTURE_2_CHANNEL, kCTIMER_Capture_FallEdge, true);
  CTIMER_RegisterCallBack(CTIMER0_PERIPHERAL, CTIMER0_callback, kCTIMER_MultipleCallback);
  /* Start the timer */
  CTIMER_StartTimer(CTIMER0_PERIPHERAL);
}

/***********************************************************************************************************************
 * USART0 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'USART0'
- type: 'lpc_miniusart'
- mode: 'polling'
- custom_name_enabled: 'false'
- type_id: 'lpc_miniusart_8dab9e8c7daef1c58d159a792e99242b'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'USART0'
- config_sets:
  - fsl_usart:
    - usartConfig:
      - clockSource: 'FunctionClock'
      - clockSourceFreq: 'ClocksTool_DefaultInit'
      - baudRate_Bps: '57600'
      - syncMode: 'kUSART_SyncModeDisabled'
      - parityMode: 'kUSART_ParityDisabled'
      - stopBitCount: 'kUSART_OneStopBit'
      - bitCountPerChar: 'kUSART_8BitsPerChar'
      - loopback: 'false'
      - enableRx: 'true'
      - enableTx: 'true'
      - clockPolarity: 'kUSART_RxSampleOnFallingEdge'
      - enableContinuousSCLK: 'false'
      - enableHardwareFlowControl: 'false'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const usart_config_t USART0_config = {
  .baudRate_Bps = 57600UL,
  .syncMode = kUSART_SyncModeDisabled,
  .parityMode = kUSART_ParityDisabled,
  .stopBitCount = kUSART_OneStopBit,
  .bitCountPerChar = kUSART_8BitsPerChar,
  .loopback = false,
  .enableRx = true,
  .enableTx = true,
  .clockPolarity = kUSART_RxSampleOnFallingEdge,
  .enableContinuousSCLK = false,
  .enableHardwareFlowControl = false
};

static void USART0_init(void) {
  /* USART0 peripheral initialization */
  USART_Init(USART0_PERIPHERAL, &USART0_config, USART0_CLOCK_SOURCE);
}

/***********************************************************************************************************************
 * ADC0 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'ADC0'
- type: 'lpc_adc'
- mode: 'ADC'
- custom_name_enabled: 'false'
- type_id: 'lpc_adc_d74172b5bd0591c0d32a6c93c043a67f'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'ADC0'
- config_sets:
  - fsl_adc:
    - doSelfCalibration: 'true'
    - adcConfig:
      - clockMode: 'kADC_ClockSynchronousMode'
      - clockSourceFreq: 'BOARD_BootClockFRO30M'
      - clockDividerNumber: '0'
      - enableLowPowerMode: 'false'
      - voltageRange: 'kADC_HighVoltageRange'
    - thresholdConfig:
      - ADC_SetThreshold0: 'false'
      - thresholdSettingsPair0:
        - lowValue: '0'
        - highValue: '0'
      - ADC_SetThreshold1: 'false'
      - thresholdSettingsPair1:
        - lowValue: '0'
        - highValue: '0'
    - enableSeqConfigurationA: 'true'
    - adcConvSeqConfigA:
      - enableHighPriority: 'false'
      - adcConvSeqConfig:
        - triggerMaskM: '0U'
        - triggerPolarity: 'kADC_TriggerPolarityPositiveEdge'
        - enableSyncBypass: 'false'
        - enableSingleStep: 'false'
        - interruptMode: 'kADC_InterruptForEachSequence'
    - enableSeqConfigurationB: 'false'
    - adcConvSeqConfigB:
      - enableHighPriority: 'false'
      - adcConvSeqConfig:
        - triggerMaskM: '0U'
        - triggerPolarity: 'kADC_TriggerPolarityNegativeEdge'
        - enableSyncBypass: 'false'
        - enableSingleStep: 'false'
        - interruptMode: 'kADC_InterruptForEachSequence'
    - channels:
      - 0:
        - channelName: ''
        - channelNumber: 'CH.0'
        - channelThresholdPair: 'thresholdPair0'
        - thresholdInterruptMode: 'kADC_ThresholdInterruptDisabled'
        - conversion_sequence: 'a'
      - 1:
        - channelName: ''
        - channelNumber: 'CH.1'
        - channelThresholdPair: 'thresholdPair0'
        - thresholdInterruptMode: 'kADC_ThresholdInterruptDisabled'
        - conversion_sequence: 'a'
      - 2:
        - channelName: ''
        - channelNumber: 'CH.2'
        - channelThresholdPair: 'thresholdPair0'
        - thresholdInterruptMode: 'kADC_ThresholdInterruptDisabled'
        - conversion_sequence: 'a'
      - 3:
        - channelName: ''
        - channelNumber: 'CH.3'
        - channelThresholdPair: 'thresholdPair0'
        - thresholdInterruptMode: 'kADC_ThresholdInterruptDisabled'
        - conversion_sequence: 'a'
      - 4:
        - channelName: ''
        - channelNumber: 'CH.5'
        - channelThresholdPair: 'thresholdPair0'
        - thresholdInterruptMode: 'kADC_ThresholdInterruptDisabled'
        - conversion_sequence: 'a'
    - interrupt_sel: 'kADC_ConvSeqAInterruptEnable'
    - enable_irq_seqA: 'true'
    - adc_interrupt_seqA:
      - IRQn: 'ADC0_SEQA_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'true'
      - priority: '3'
      - enable_custom_name: 'false'
    - enable_irq_seqB: 'false'
    - adc_interrupt_seqB:
      - IRQn: 'ADC0_SEQB_IRQn'
      - enable_interrrupt: 'noInit'
      - enable_priority: 'false'
      - priority: '2'
      - enable_custom_name: 'false'
    - enable_irq_thcmp: 'false'
    - adc_interrupt_thcmp:
      - IRQn: 'ADC0_THCMP_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - enable_irq_ovr: 'false'
    - adc_interrupt_ovr:
      - IRQn: 'ADC0_OVR_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const adc_config_t ADC0configStruct = {
  .clockMode = kADC_ClockSynchronousMode,
  .clockDividerNumber = 0UL,
  .enableLowPowerMode = false,
  .voltageRange = kADC_HighVoltageRange,
};
/* Conversion sequence A configuration structure */
const adc_conv_seq_config_t ADC0ConvSeqAConfigStruct = {
  .channelMask = 1U | 2U | 4U | 8U | 32U,
  .triggerMask = 0U,
  .triggerPolarity = kADC_TriggerPolarityPositiveEdge,
  .enableSyncBypass = false,
  .enableSingleStep = false,
  .interruptMode = kADC_InterruptForEachSequence,
};

static void ADC0_init(void) {
  /* Perform self calibration */
  ADC_DoSelfCalibration(ADC0_PERIPHERAL, ADC0_CLK_FREQ);
  /* Initialize ADC0 peripheral */
  ADC_Init(ADC0_PERIPHERAL, &ADC0configStruct);
  /* Configure the conversion sequence A */
  ADC_SetConvSeqAConfig(ADC0_PERIPHERAL, &ADC0ConvSeqAConfigStruct);
  /* Enable the conversion sequence A */
  ADC_EnableConvSeqA(ADC0_PERIPHERAL, true);
  /* Enable interrupt from ADC */
  ADC_EnableInterrupts(ADC0_PERIPHERAL, kADC_ConvSeqAInterruptEnable);
  /* Configure threshold compare interrupt on channel 0 */
  ADC_EnableThresholdCompareInterrupt(ADC0_PERIPHERAL, 0U, kADC_ThresholdInterruptDisabled);
  /* Configure threshold compare interrupt on channel 1 */
  ADC_EnableThresholdCompareInterrupt(ADC0_PERIPHERAL, 1U, kADC_ThresholdInterruptDisabled);
  /* Configure threshold compare interrupt on channel 2 */
  ADC_EnableThresholdCompareInterrupt(ADC0_PERIPHERAL, 2U, kADC_ThresholdInterruptDisabled);
  /* Configure threshold compare interrupt on channel 3 */
  ADC_EnableThresholdCompareInterrupt(ADC0_PERIPHERAL, 3U, kADC_ThresholdInterruptDisabled);
  /* Configure threshold compare interrupt on channel 5 */
  ADC_EnableThresholdCompareInterrupt(ADC0_PERIPHERAL, 5U, kADC_ThresholdInterruptDisabled);
  /* Interrupt vector ADC0_SEQA_IRQn priority settings in the NVIC. */
  NVIC_SetPriority(ADC0_ADC_SEQ_A_IRQN, ADC0_ADC_SEQ_A_IRQ_PRIORITY);
  /* Enable interrupt ADC0_SEQA_IRQn request in the NVIC. */
  EnableIRQ(ADC0_ADC_SEQ_A_IRQN);
}

/***********************************************************************************************************************
 * SCT0 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'SCT0'
- type: 'sctimer'
- mode: 'basic'
- custom_name_enabled: 'false'
- type_id: 'sctimer_7973000102117ff9c4fa4742aaf3ccb0'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'SCT0'
- config_sets:
  - main:
    - config:
      - clockMode: 'kSCTIMER_System_ClockMode'
      - clockSource: 'SynchronousFunctionClock'
      - clockSourceFreq: 'ClocksTool_DefaultInit'
      - SCTInputClockSourceFreq: 'custom:0'
      - clockSelect: 'kSCTIMER_Clock_On_Rise_Input_0'
      - enableCounterUnify: 'true'
      - enableBidirection_l: 'false'
      - enableBidirection_h: 'false'
      - prescale_l: '30'
      - prescale_h: '1'
      - outInitState: ''
      - inputsync: ''
    - enableIRQ: 'false'
    - interrupt:
      - IRQn: 'SCT0_IRQn'
      - enable_interrrupt: 'enabled'
      - enable_priority: 'false'
      - priority: '0'
      - enable_custom_name: 'false'
    - enableLTimer: 'true'
    - enableHTimer: 'false'
    - pwms:
      - 0:
        - output: 'kSCTIMER_Out_0'
        - level: 'kSCTIMER_HighTrue'
        - dutyCyclePercent: '50'
      - 1:
        - output: 'kSCTIMER_Out_1'
        - level: 'kSCTIMER_HighTrue'
        - dutyCyclePercent: '10'
    - pwmMode: 'kSCTIMER_EdgeAlignedPwm'
    - pwmFrequency: '300'
    - events: []
    - states:
      - 0:
        - pwms: 'pwm0 pwm1'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const sctimer_config_t SCT0_initConfig = {
  .enableCounterUnify = true,
  .clockMode = kSCTIMER_System_ClockMode,
  .clockSelect = kSCTIMER_Clock_On_Rise_Input_0,
  .enableBidirection_l = false,
  .enableBidirection_h = false,
  .prescale_l = 29U,
  .prescale_h = 0U,
  .outInitState = 0U,
  .inputsync = 0U
};
const sctimer_pwm_signal_param_t SCT0_pwmSignalsConfig[2] = {
  {
    .output = kSCTIMER_Out_0,
    .level = kSCTIMER_HighTrue,
    .dutyCyclePercent = 50U
  },
  {
    .output = kSCTIMER_Out_1,
    .level = kSCTIMER_HighTrue,
    .dutyCyclePercent = 10U
  }
};
uint32_t SCT0_pwmEvent[2];

static void SCT0_init(void) {
  SCTIMER_Init(SCT0_PERIPHERAL, &SCT0_initConfig);
  /* Initialization of state 0 */
  SCTIMER_SetupPwm(SCT0_PERIPHERAL, &SCT0_pwmSignalsConfig[0], kSCTIMER_EdgeAlignedPwm, 300U, SCT0_CLOCK_FREQ, &SCT0_pwmEvent[0]);
  SCTIMER_SetupPwm(SCT0_PERIPHERAL, &SCT0_pwmSignalsConfig[1], kSCTIMER_EdgeAlignedPwm, 300U, SCT0_CLOCK_FREQ, &SCT0_pwmEvent[1]);
  SCTIMER_StartTimer(SCT0_PERIPHERAL, kSCTIMER_Counter_U);
}

/***********************************************************************************************************************
 * MRT0 initialization code
 **********************************************************************************************************************/
/* clang-format off */
/* TEXT BELOW IS USED AS SETTING FOR TOOLS *************************************
instance:
- name: 'MRT0'
- type: 'mrt'
- mode: 'general_config'
- custom_name_enabled: 'false'
- type_id: 'mrt_ec4ff9f008b2eee803e5f398b3b3325f'
- functional_group: 'BOARD_InitPeripherals'
- peripheral: 'MRT0'
- config_sets:
  - fsl_mrt:
    - mrtOperationMode: 'HSM'
    - clockSettingMRT:
      - clockSource: 'BusInterfaceClock'
      - clockSourceFreq: 'ClocksTool_DefaultInit'
    - mrtChannels:
      - 0:
        - mrtChannelPrefixID: 'Channel_0'
        - channelNumber: 'kMRT_Channel_0'
        - timerMode: 'kMRT_RepeatMode'
        - timerValueStr: '10 ms'
        - startTimer: 'true'
        - enableInterruptRequest: 'true'
      - 1:
        - mrtChannelPrefixID: 'Channel_1'
        - channelNumber: 'kMRT_Channel_1'
        - timerMode: 'kMRT_RepeatMode'
        - timerValueStr: '30 ms'
        - startTimer: 'false'
        - enableInterruptRequest: 'true'
      - 2:
        - mrtChannelPrefixID: 'Channel_2'
        - channelNumber: 'kMRT_Channel_2'
        - timerMode: 'kMRT_RepeatMode'
        - timerValueStr: '50 ms'
        - startTimer: 'false'
        - enableInterruptRequest: 'true'
      - 3:
        - mrtChannelPrefixID: 'Channel_3'
        - channelNumber: 'kMRT_Channel_3'
        - timerMode: 'kMRT_RepeatMode'
        - timerValueStr: '1.5 ms'
        - startTimer: 'false'
        - enableInterruptRequest: 'true'
    - interruptVector:
      - enableInterrupt: 'true'
      - interrupt:
        - IRQn: 'MRT0_IRQn'
        - enable_interrrupt: 'enabled'
        - enable_priority: 'true'
        - priority: '1'
        - enable_custom_name: 'false'
 * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR TOOLS **********/
/* clang-format on */
const mrt_config_t MRT0_config = {
  .enableMultiTask = false
};

static void MRT0_init(void) {
  /* MRT0 peripheral initialization */
  MRT_Init(MRT0_PERIPHERAL, &MRT0_config);
  /* MRT channel 0 of MRT0 peripheral initialization */
  MRT_SetupChannelMode(MRT0_PERIPHERAL, MRT0_CHANNEL_0, MRT0_CHANNEL_0_MODE);
  /* MRT channel 1 of MRT0 peripheral initialization */
  MRT_SetupChannelMode(MRT0_PERIPHERAL, MRT0_CHANNEL_1, MRT0_CHANNEL_1_MODE);
  /* MRT channel 2 of MRT0 peripheral initialization */
  MRT_SetupChannelMode(MRT0_PERIPHERAL, MRT0_CHANNEL_2, MRT0_CHANNEL_2_MODE);
  /* MRT channel 3 of MRT0 peripheral initialization */
  MRT_SetupChannelMode(MRT0_PERIPHERAL, MRT0_CHANNEL_3, MRT0_CHANNEL_3_MODE);
  /* MRT channel 0 interrupt of MRT0 peripheral initialization */
  MRT_EnableInterrupts(MRT0_PERIPHERAL, MRT0_CHANNEL_0, kMRT_TimerInterruptEnable);
  /* MRT channel 1 interrupt of MRT0 peripheral initialization */
  MRT_EnableInterrupts(MRT0_PERIPHERAL, MRT0_CHANNEL_1, kMRT_TimerInterruptEnable);
  /* MRT channel 2 interrupt of MRT0 peripheral initialization */
  MRT_EnableInterrupts(MRT0_PERIPHERAL, MRT0_CHANNEL_2, kMRT_TimerInterruptEnable);
  /* MRT channel 3 interrupt of MRT0 peripheral initialization */
  MRT_EnableInterrupts(MRT0_PERIPHERAL, MRT0_CHANNEL_3, kMRT_TimerInterruptEnable);
  /* Interrupt vector MRT0_IRQn priority settings in the NVIC. */
  NVIC_SetPriority(MRT0_IRQN, MRT0_IRQ_PRIORITY);
  /* Enable interrupt MRT0_IRQn request in the NVIC. */
  EnableIRQ(MRT0_IRQN);
  /* MRT channel 0 start of MRT0 peripheral initialization */
  MRT_StartTimer(MRT0_PERIPHERAL, MRT0_CHANNEL_0, MRT0_CHANNEL_0_TICKS);
}

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/
void BOARD_InitPeripherals(void)
{
  /* Initialize components */
  USART1_init();
  CTIMER0_init();
  USART0_init();
  ADC0_init();
  SCT0_init();
  MRT0_init();
}

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void)
{
}
