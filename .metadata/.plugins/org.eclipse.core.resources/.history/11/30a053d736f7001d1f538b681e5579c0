#include "PID.h"

	PidController pid_right;
	PidController pid_left;
	volatile bool pid_updated = false;
void PIDInit(){

	pid_right.Kd = 9.5493 * 1.5;//0.465;
	pid_right.Ki = 9.5493 / 6;//1.145;
	pid_right.Kp = 19.0986 / 5;
	pid_right.integral = 0.0;
	pid_right.last_error = 0.0;
	pid_right.output = 0.0;
	pid_right.setpoint = 120; //60.0;

	pid_left.Kd = 9.5493 * 1.5;
	pid_left.Ki = 9.5493 / 6;
	pid_left.Kp = 19.0986 / 5;
	pid_left.integral = 0.0;
	pid_left.last_error = 0.0;
	pid_left.output = 0.0;
	pid_left.setpoint = 120; //60.0;
}

void PIDContollerUpdate(PidController* pid, float measurement){

	float error = pid->setpoint - measurement;

    float proportional = pid->Kp * error;

    pid->integral += pid->Ki * error;

    // Limit the integral term to prevent windup
    if (pid->integral > MAX_PID_OUTPUT) {
            pid->integral = MAX_PID_OUTPUT;
        }
    else if (pid->integral < MIN_PID_OUTPUT) {
            pid->integral = MIN_PID_OUTPUT;
        }

    float derivative = pid->Kd * (error - pid->last_error);

    if(car.direction != GOFORWARD && car.direction != GOBACKWARD)
    {
    	pid->integral = 0;
    	derivative = 0;
    }

    pid->output = proportional + pid->integral + derivative;

    // Limit the output to within the allowable range
    if (pid->output > MAX_PID_OUTPUT) {
    	pid->output = MAX_PID_OUTPUT;
      }
    else if (pid->output < MIN_PID_OUTPUT) {
    	pid->output = MIN_PID_OUTPUT;
      }
    pid->last_error = error;

}
bool isPIDUpdated()
{
	return pid_updated;
}

int RoundPIDOutput(float output)
{
	float decimal = output- floor(output);

	if(decimal > 0.5)
		decimal = (int) 1;
	else
		decimal = (int) 0;
	return decimal + (int) output;
}
float ScaleUpRPM(float rpm){
	return (rpm/MAX_RPM)*MAX_PID_OUTPUT;
}
void PIDTIMERHandler(){
    {

    	__disable_irq();
    	float rpm_left = Encoder_left.RPM;
    	float rpm_right = Encoder_right.RPM;
    	__enable_irq();

        PIDContollerUpdate(&pid_right, rpm_right);
        PIDContollerUpdate(&pid_left, rpm_left);
        //pid_updated = true;
		 SetPWM(RoundPIDOutput(pid_right.output + PID_OUTPUT_OFFSET), &motor_right);
		 SetPWM(RoundPIDOutput(pid_left.output + PID_OUTPUT_OFFSET), &motor_left);
        PRINTF("%d,%d,%d,%d,%d\n", (int)rpm_left, (int)rpm_right,
    		(int)pid_left.output, (int)pid_right.output, (int)pid_right.setpoint);
//        PRINTF("%d,%d,%d,%d,%d\n", (int)60, (int)60,
//    		(int)pid_left.output, (int)pid_right.output, (int)pid_left.setpoint);

    }
}
